group dot;

/** Template for grammar */
apeg(name, option, rule) ::= <<
Digraph <name> {
  node [shape="box"];
  grammar [label = "Grammar[<name>]<if(option)>:<option; separator=";"><endif>"];
  
  <rule; separator="\n">
}
>>


/** Template for rule declaration */
rule(annotation, rname, nodeName, inh, syn, peg) ::= <<
<nodeName> [label = "Rule[<rname>]<if(annotation)>:<annotation><endif>"];
grammar -> <nodeName>;
<if(inh)>
<inh; separator="\n", wrap>
<endif>
<if(syn)>
<syn; separator="\n", wrap>
<endif>
<peg; separator="\n", wrap>
>>

/** Template for dot node and edges */
node(parent, node, lable) ::= <<
<node> [label = "<lable>"];
<edge(parent, node)>
>>

/** Template for dot node and edges */
nodeLabels(parent, node, label) ::= <<
<node> [label = "<label; separator=",", wrap>"];
<edge(parent, node)>
>>



edge(parent, node) ::= <<
<parent> -> <node>;
>>


/** Template for parameters declaration */
inh(attr) ::= "<\u2193><attr>"
syn() ::= "<\u2191>"

attribute_lable(name) ::= "<name>"
attribute_grammar_lable(name) ::= "$<name>"


/** Template for types */
int_type() ::= "int"
float_type() ::= "float"
string_type() ::= "string"
boolean_type() ::= "boolean"
grammar_type() ::= "grammar"
char_type() ::= "char"


/** Template for parsing expression */
and_peg_lable() ::= "AndPegExpr(&)"
any_peg_lable() ::= "AnyPegExpr(.)"
bind_peg_lable(name) ::="BindPegExpr(=):<name>"
choice_peg_lable() ::= "ChoicePegExpr(/);"
constraint_peg_lable() ::= "ConstraintPegExpr({?})"
literal_peg_lable(value) ::= "'<value>'"
lambda_peg_lable() ::= "<\u03BB>" 
nonterminal_peg_lable(name) ::= "NonterminalPegExpr:<name>"
not_peg_lable() ::= "NotPegExpr(!)"
plus_peg_lable() ::= "PlusPegExpr(+)"
optional_peg_lable() ::= "OptionalPegExpr(?)"
sequence_peg_lable() ::= "SequencePegExpr(.)"
star_peg_lable() ::= "StarPegExpr(*)"
update_peg_lable() ::= "UpdatePegExpr([\<-])"


/** Template for assignment from update parsing expressions */
assign_lable(var) ::= "Assignment:<var>"


/** Template for expressions */
attribute_expr_lable(name) ::= "<name>"
attribute_grammar_lable(name) ::= "<name>"

gt_expr_lable() ::= "\>"
ge_expr_lable() ::= "<\u2265>"
lt_expr_lable() ::= "\<"
le_expr_lable() ::= "<\u2264>"
mul_expr_lable() ::= "*"
div_expr_lable() ::= "/"
mod_expr_lable() ::= "%"
add_expr_lable() ::= "+"
sub_expr_lable() ::= "-"

equals_expr_lable() ::= "=="
no_equals_expr_lable() ::= "<\u2260>"


boolean_expr_lable(value) ::= "<value>"
float_expr_lable(value) ::= "<value>"
int_expr_lable(value) ::= "<value>"
string_expr_lable(value) ::= "'<value>'"
char_expr_lable(value) ::= "<value>"
meta_expr_lable() ::= "@[ ]"
minus_expr_lable() ::= "-"
not_expr_lable() ::= "<\u00AC>"
or_expr_lable() ::= "||"
and_expr_lable() ::= "&&"
concat_expr_lable() ::= "++"
