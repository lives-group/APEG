Digraph litExpr {
  node [shape="box"];
  grammar [label = "Grammar[litExpr]"];

  sRule [label = "Rule[s]"];
  grammar -> sRule;
  sRule_c [label = "↓c:int "];
  sRule -> sRule_c;
  sRule_b [label = "↓b:int "];
  sRule -> sRule_b;
  sRule_x [label = "↑x:int "];
  sRule -> sRule_x;
  p_expr_choice0 [label = "ChoicePegExpr(/)"];
  sRule -> p_expr_choice0;
  p_expr_sequence1 [label = "SequencePegExpr(.)"];
  p_expr_choice0 -> p_expr_sequence1;
  p_expr_nonterminal2 [label = "NonterminalPegExpr:ss"];
  p_expr_sequence1 -> p_expr_nonterminal2;
  expr_int0 [label = "5:int"];
  p_expr_nonterminal2 -> expr_int0;
  p_expr_literal3 [label = "'0'"];
  p_expr_sequence1 -> p_expr_literal3;
  p_expr_update4 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence1 -> p_expr_update4;
  assignment0 [label = "Assignment:x"];
  p_expr_update4 -> assignment0;
  expr_binary1 [label = "-"];
  assignment0 -> expr_binary1;
  expr_var2 [label = "c:var"];
  expr_binary1 -> expr_var2;
  expr_var3 [label = "b:var"];
  expr_binary1 -> expr_var3;
  p_expr_sequence5 [label = "SequencePegExpr(.)"];
  p_expr_choice0 -> p_expr_sequence5;
  p_expr_nonterminal6 [label = "NonterminalPegExpr:ss"];
  p_expr_sequence5 -> p_expr_nonterminal6;
  expr_int4 [label = "5:int"];
  p_expr_nonterminal6 -> expr_int4;
  p_expr_literal7 [label = "'1'"];
  p_expr_sequence5 -> p_expr_literal7;
  p_expr_update8 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence5 -> p_expr_update8;
  assignment1 [label = "Assignment:x"];
  p_expr_update8 -> assignment1;
  expr_binary5 [label = "+"];
  assignment1 -> expr_binary5;
  expr_var6 [label = "c:var"];
  expr_binary5 -> expr_var6;
  expr_var7 [label = "b:var"];
  expr_binary5 -> expr_var7;
  ssRule [label = "Rule[ss]"];
  grammar -> ssRule;
  ssRule_c [label = "↓c:int "];
  ssRule -> ssRule_c;
  p_expr_update9 [label = "UpdatePegExpr([<-])"];
  ssRule -> p_expr_update9;
  assignment2 [label = "Assignment:c"];
  p_expr_update9 -> assignment2;
  expr_binary8 [label = "+"];
  assignment2 -> expr_binary8;
  expr_var9 [label = "c:var"];
  expr_binary8 -> expr_var9;
  expr_int10 [label = "1:int"];
  expr_binary8 -> expr_int10;
}