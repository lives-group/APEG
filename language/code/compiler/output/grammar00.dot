Digraph range {
  node [shape="box"];
  grammar [label = "Grammar[range]"];

  rangeRule [label = "Rule[range]"];
  grammar -> rangeRule;
  choicePeg0 [label = "ChoicePegExpr(/);"];
  rangeRule -> choicePeg0;
  NonterminalPeg1 [label = "NonterminalPegExpr:escape"];
  choicePeg0 -> NonterminalPeg1;
  choicePeg2 [label = "ChoicePegExpr(/);"];
  choicePeg0 -> choicePeg2;
  NonterminalPeg3 [label = "NonterminalPegExpr:letter"];
  choicePeg2 -> NonterminalPeg3;
  NonterminalPeg4 [label = "NonterminalPegExpr:digit"];
  choicePeg2 -> NonterminalPeg4;
  escapeRule [label = "Rule[escape]"];
  grammar -> escapeRule;
  choicePeg5 [label = "ChoicePegExpr(/);"];
  escapeRule -> choicePeg5;
  rangePeg6 [label = "[\\t..\\n]"];
  choicePeg5 -> rangePeg6;
  choicePeg7 [label = "ChoicePegExpr(/);"];
  choicePeg5 -> choicePeg7;
  rangePeg8 [label = "[\\b..\\f]"];
  choicePeg7 -> rangePeg8;
  choicePeg9 [label = "ChoicePegExpr(/);"];
  choicePeg7 -> choicePeg9;
  rangePeg10 [label = "[\'..\\]"];
  choicePeg9 -> rangePeg10;
  rangePeg11 [label = "[\\r..λ]"];
  choicePeg9 -> rangePeg11;
  letterRule [label = "Rule[letter]"];
  grammar -> letterRule;
  choicePeg12 [label = "ChoicePegExpr(/);"];
  letterRule -> choicePeg12;
  rangePeg13 [label = "[a..z]"];
  choicePeg12 -> rangePeg13;
  rangePeg14 [label = "[A..Z]"];
  choicePeg12 -> rangePeg14;
  digitRule [label = "Rule[digit]"];
  grammar -> digitRule;
  rangePeg15 [label = "[0..9]"];
  digitRule -> rangePeg15;
  wsRule [label = "Rule[ws]"];
  grammar -> wsRule;
  choicePeg16 [label = "ChoicePegExpr(/);"];
  wsRule -> choicePeg16;
  LiteralPeg17 [label = "' '"];
  choicePeg16 -> LiteralPeg17;
  choicePeg18 [label = "ChoicePegExpr(/);"];
  choicePeg16 -> choicePeg18;
  LiteralPeg19 [label = "'\n'"];
  choicePeg18 -> LiteralPeg19;
  choicePeg20 [label = "ChoicePegExpr(/);"];
  choicePeg18 -> choicePeg20;
  LiteralPeg21 [label = "'\r'"];
  choicePeg20 -> LiteralPeg21;
  LiteralPeg22 [label = "'\t'"];
  choicePeg20 -> LiteralPeg22;
  lambdaRule [label = "Rule[lambda]"];
  grammar -> lambdaRule;
  LambdaPeg23 [label = "λ"];
  lambdaRule -> LambdaPeg23;
}