# This file is based on dg.exp, a general test driver of DejaGNU
# This file uses and modifies some procedures from dg.exp
 
# The currently supported options are:
#
# dg-error regexp comment 
#	indicate an error message <regexp> is expected on the line
#       where this option occurs
#	(the test fail fails if the output does not contain the expected message)
#	
#
# dg-warning regexp comment
#	indicate a warning message <regexp> is expected on the line
#       where this option occurs
#	(the test fails if the output doesn't contain the expected message)
# 
# dg-checkwhat subtool
#   indicate which tool is to be tested
# 
# (If there is no error and warning options, the testcase is expected to pass)

# Useful subroutines.

#
# Line number format.  This is how line numbers appear in program output.
#
set dg-linenum-format ":%d:"
proc dg-format-linenum { linenum } {
    global dg-linenum-format
    return [format ${dg-linenum-format} $linenum]
}

#
# dg-get-checkwhat: get the option dg-checkwhat from a source file to see
#   if the source file is used to check the parser or the analyzer
#
proc dg-get-checkwhat { prog } {
  set tmp [grep $prog "{{\[ \t\]\+dg-checkwhat\+\[ \t\]\+.*\[ \t\]\+}}" line]
  if { [llength $tmp] == 0 } {
    return ""
  }
  if { [llength $tmp] == 1 } {
    set i [lindex $tmp 0]  
    regexp "(\[0-9\]\+)\[ \t\]\+{{\[ \t\]+(dg-\[-a-z\]+)\[ \t\]\+(.*)\[ \t\]+}}(\n|$)" $i i line cmd args
    set result [lindex $args 0]
    return $result
  } else {
    error "dg-checkwhat in $prog must be specified once"
    return "Error"
  }	
}

# dg-get-options -- pick out the dg-xxx options in a testcase
#
# PROG is the file name of the testcase.
# this proc will copy the testcase to a temporary file and remove dg-xxx options from
# that temporary file. Then we use the temporary file to run test
# The result is a list of options found.
#
# Example: For the following testcase:
#
# int foo { return 0; }  {{ dg-error fatal "some comment" }}
#
# we return:
#
# { dg-error 1 fatal "some comment" }, 1 is the number of the line where the option occurs
#

proc dg-get-options { args } {
    set input_file [lindex $args 0]
    set output_file [lindex $args 1]
    set input [open $input_file "r"]
    set output [open $output_file "w"]
    # get options
    set result ""
    set tmp [grep $input_file "{{\[ \t\]\+dg-\[-a-z\]\+\[ \t\]\+.*\[ \t\]\+}}" line]
    if ![string match "" $tmp] {
	foreach i $tmp {
	    regexp "(\[0-9\]\+)\[ \t\]\+{{\[ \t\]+(dg-\[-a-z\]+)\[ \t\]\+(.*)\[ \t\]+}}(\n|$)" $i i line cmd args
	    append result " { $cmd $line $args }"
	}
    }
    while 1 { 
    	# remove options and copy prog to a new file
        if {[gets $input input_line] == -1} break
        regsub "{{\[ \t\]\+dg-\[-a-z\]\+\[ \t\]\+.*\[ \t\]\+}}" $input_line "" new_line
        puts $output $new_line
    }	
    close $input
    close $output
    return $result
}

# process error 
proc dg-error { args } {
    upvar dg-messages messages
    if { [llength $args] > 3 } {
	error "dg-error at line [lindex $args 0] : too many arguments"
	return
    }
    set line [dg-format-linenum [lindex $args 0]] 	
    lappend messages [list $line "ERROR" [lindex $args 1] [lindex $args 2]]
}

# process warning
proc dg-warning { args } {
    upvar dg-messages messages
    if { [llength $args] > 3 } {
	error "dg-warning at line [lindex $args 0]: too many arguments"
	return
    }
    set line [dg-format-linenum [lindex $args 0]]
    lappend messages [list $line "WARNING" [lindex $args 1] [lindex $args 2]]
}

# Option used to indicate which tool to be tested
proc dg-checkwhat { args } {
  if { [llength $args] > 2 } {
    error "xtc_checkwhat at line [lindex $args 0]: too many arguments"
    return
  }
}

# Set up our environment
#
# There currently isn't much to do, but always calling it allows us to add
# enhancements without having to update our callers.
# It must be run before calling `dg-runtest'.

proc dg-init { } {
}

# dg-runtest -- simple main loop useful to most testsuites
#
# global runtests are the specific files (.exp) to run
# runtests is defined in runtest.exp, which a list of two elements: the script name
# and any arguments ("" if none). In this testsuite, runtests is just a list of script name
# runtest_file_p is defined in util.exp of DejaGNU
#

proc dg-runtest { testcases } {
    global runtests
        
    foreach testcase $testcases {
	# If we're only testing specific files and this isn't one of them, skip it.
	if ![runtest_file_p $runtests $testcase] {
	    continue
	}
	
        #return
	set check [dg-test $testcase]
	if [string match $check "Error"] {
		puts "Could not run tool"
		return	
	}
    }
}

# dg-trim-dirname -- rip DIR_NAME out of FILE_NAME
#
# Syntax: dg-trim-dirname dir_name file_name
# We need to go through this contorsion in order to properly support
# directory-names which might have embedded regexp special characters.

proc dg-trim-dirname { dir_name file_name } {
    set special_character "\[\?\+\-\.\(\)\$\|\]"
    regsub -all $special_character $dir_name "\\\\&" dir_name
    regsub "^$dir_name/?" $file_name "" file_name
    return $file_name
}

# dg-test -- runs a testcase
#
# Syntax: dg-test prog
#
# prog is the full path name of the file to pass to xtc (Overlog).

proc dg-test { args } {
    global check_what
    global dg-linenum-format
    global errorCode errorInfo
    global srcdir
    
    set keep 0
    set i 0
    # check arguments 	
    if { [llength $args] > 1 } {
	error "[lindex $args 0]: too many arguments"
	return
    }
    
    set prog [lindex $args 0] 
    
    set text "\[- A-Za-z0-9\.\;\"\_\:\'\`\(\)\!\#\=\+\?\&\*]*"

    set name [dg-trim-dirname $srcdir $prog]
    
    # If we couldn't rip $srcdir out of `prog' then just do the best we can.
    # The point is to reduce the unnecessary noise in the logs.  Don't strip
    # out too much because different testcases with the same name can confuse
    # `test-tool'.
    if [string match "/*" $name] {
	set name "[file tail [file dirname $prog]]/[file tail $prog]"
    }

    # Process any embedded dg options in the testcase.
    set dg-messages ""
    # Define our own "special function" `unknown' so we catch spelling errors.
    # But first rename the existing one so we can restore it afterwards.
    catch {rename dg-save-unknown ""}
    rename unknown dg-save-unknown
    proc unknown { args } {
	return -code error "unknown dg option: $args"
    }
    
    set check_what [dg-get-checkwhat $prog]
     
    # Get and process options
    
    set option_removed_file [file rootname $prog]
    append option_removed_file ".E"
    set tmp [dg-get-options $prog ${option_removed_file}]

    foreach op $tmp {
	verbose "Processing option: $op" 3
	set status [catch "$op" errmsg]
	if { $status != 0 } {
	    perror "$name: $errmsg for \"$op\"\n"
	    unresolved "$name: $errmsg for \"$op\""
	    return
	}
    }
  
    # Restore normal error handling.
    rename unknown ""
    rename dg-save-unknown unknown

    # Run the tool and analyze the results.
    verbose "Testing [file tail [file dirname $prog]]/[file tail $prog]"
    set comp_output [olg-analysis-dg-test $option_removed_file]
    
    # check for error   
    if [string match $comp_output "Test driver error"] {
    	unresolved "$name: Could not run this testcase, test driver error"
        return
    }

    if [string match $comp_output "Tool Error"] {
	set result "Error"
    	return $result
    }

    if [string match $comp_output "Timeout"] {
	unresolved "$name: not responsed, timeout"
    	return 
    }
   
    # Analyze output for result	
    # If we are checking the output
    if [string match $check_what "output"] {
      set res [compare_output $comp_output $prog]
      if [string match $res "Pass"] {
        pass $prog	        
      } else {
        if [string match $res "Fail"] {
          fail $prog          
        } else {
	  puts "Unknown error"
        }
      }
      exec rm -f $option_removed_file
      return
    }  
    
    # Testing		
    if { [llength ${dg-messages}] > 0 } {
        foreach i ${dg-messages} {
		verbose "Scanning for message: $i" 3
		# Remove all error messages for the line [lindex $i 0]
		# in the source file.  If we find any, success!
		set line [lindex $i 0]
		set pattern [lindex $i 2]
		set comment [lindex $i 3]
		
		if [regsub -all "(^|\n)(\[^\n\]+E+$line\[^\n\]*($pattern)\[^\n\]*\n?)+" $comp_output "\n" comp_output] {
	            set comp_output [string trimleft $comp_output]
		    set ok pass
			    
		} else {
		    set ok fail
                    		    
		}
			
		# $line will either be a formatted line number or a number all by
		# itself.  Delete the formatting.
		scan $line ${dg-linenum-format} line
		switch [lindex $i 1] {
		    "ERROR" {
			$ok "$name $comment (test for errors)"
		    }
		    "WARNING" {
			$ok "$name $comment (test for warnings)"
		    }
		}
    	} 
	# end foreach
	# check for more errors than expected (just for analyzer)	
	if [regsub ":error:" $comp_output "" comp_output] {
		fail "$name (excess error)"
	}
	if [regsub ":warning:" $comp_output "" comp_output] {
		fail "$name (excess error)"
	}
	 
    } else {
        # dg-messages is empty, the testcase is expected to pass
	if ![string match "" $comp_output] {
		fail "$name (unexpected errors)"
	} else {
		pass "$name (test for success)"
	}
    }

    #remove files
    exec rm -f $option_removed_file
    
}
# Do any necessary cleanups
#
# This is called at the end to undo anything dg-init did (that needs undoing).
#
proc dg-finish { } {
    # Reset this in case caller wonders whether s/he should.
    global prms_id
    set prms_id 0

    # The framework doesn't like to see any error remnants, so remove them.
    global errorInfo
    if [info exists errorInfo] {
	unset errorInfo
    }

    # If the tool has a "finish" routine, call it.
    # There may be a bit of duplication (eg: resetting prms_id), leave it.
    # Let's keep these procs robust.
    global tool
    if ![string match "" [info procs ${tool}_finish]] {
	${tool}_finish
    }
}
