group prettyprint;

/** Defining the grammar specfication template */
apeg(name, option, header, func_sources, rules) ::= <<
apeg <name>;
<if(option)>

options {
  <option; separator=";\n">;
}
<endif>

<if(header)>

header {
 <header>
}
<endif>

<if(func_sources)>

functions <functions; separator=" ", wrap> from {
  <func_sources; separator=" ", wrap>
};
<endif>

<rules:rule(); separator="\n\n">
>>

/** Template for rules specification */
rule(r) ::= <<
<if(r.annotation)>
@<r.annotation> 
<endif>
<r.name><if(r.inh_attr)>[<r.inh_attr:decl(); separator=", ", wrap>]<endif><if(r.syn_attr)> returns[<r.syn_attr:decl(); separator=", ", wrap>]<endif><if(r.ret_attr)> locals[<r.ret_attr:decl(); separator=", ", wrap>]<endif>:
  <r.peg_expr>
;
>>

/** Template for parameters declaration */
decl(attr) ::= <<
<attr.type> <attr.name>
>>



/** Template for types */
int() ::= "int"
float() ::= "float"
string() ::= "string"
boolean() ::= "boolean"
grammar() ::= "grammar"
ruleType() ::= "rule"
idType(name) ::= "<name>"
and_expr(e,d) ::= "<e> && <d>" 
atribute_expr(atribute) ::= "<atribute>"
binary_expr(e,o,d) ::= "<e> <d>"

lt_expr(e,d) ::= "(<e>  <d>)"

boolean_expr(valor) ::= "<valor>"
call_expr(name,param) ::=  "<name><param>" 
equality_expr(e,tipo,d) ::= "<e> <tipo> <d>"
float_expr(valor) ::= "<valor>"
int_expr(valor) ::= "<valor>"
meta_expr(valor) ::= "@[ <valor> ]"
minus_expr(minus) ::= "-<minus>"
not_expr(not) ::= "!<not>"
or_expr(e,d) ::= "<e> || <d>"
string_expr(string) ::= "<string>"

/** Template for parsing expression */
and_peg(and) ::= "&&<and>"
bind_peg(bind,variable) ::="<variable> = (<bind>)"
choice_peg(e,d) ::= "<e> / <d>"
constraint_peg(constraint) ::= "{?(<constraint>)}"
gr_peg(gr) ::= "<gr>"
literal_peg(literal) ::= " <literal> " 
non_peg(name,exprr) ::= "<exprr> <name> "  
no_peg(no) ::= "!(no)"
plus_peg(plus) ::= "(<plus>)+"
optional_peg(optional) ::= "?<optional>"
sequence_peg(sequence) ::= "<sequence>"
star_peg(star) ::= "(<star>)*"
update_peg(update) ::= "[<update>]"

assign(as,a) ::= "<as> = <a>;"
func(f) ::= "<f>"



