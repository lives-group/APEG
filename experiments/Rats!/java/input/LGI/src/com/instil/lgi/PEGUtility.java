/*
 * PEGUtility.java
 *
 * Created on October 20, 2006, 4:23 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.instil.lgi;

/**
 * This is a GrammarUtility implementation used by the ParsingExpressionGrammar
 * to optimize the parsed trees and parse errors generated by it.
 * @see TreeOptimizer
 * @author Edgar A. Duenez-Guzman
 */
public final class PEGUtility implements GrammarUtility
{
    /**
     * A public and static instance of a PEGUtility (singleton).
     */
    public static final PEGUtility utility = new PEGUtility();
    private PEGUtility() {}

    /**
     * This method removes empty Blocks, Blocks of type spacing, children of Blocks
     * of type literal, and collapses long branches with no smantic meanning.
     * @see TreeOptimizer#removeEmpty( Block )
     * @see TreeOptimizer#removeAllOfType( Block, int )
     * @see TreeOptimizer#removeChildrenOfType( Block, int )
     * @see TreeOptimizer#collapse( Block )
     * @param b The Block to optimize.
     */
    public void optimizeParsedTree( Block b )
    {
        //System.out.println( b + "\n\n" );

        //Remove empty parsed blocks.
        TreeOptimizer.removeEmpty( b );
        //Remove all comments and blanks.
        TreeOptimizer.removeAllOfType( b, ParsingExpressionGrammar.SPACING );

        //Terminals from ParsingExpressionGrammar.LITERAL to ParsingExpressionGrammar.DOT (inclusive)
        for( int i = 7; i < 20; i++ )
            TreeOptimizer.removeChildrenOfType( b, i );

        //System.out.println( b + "\n\n" );

        //Collapse all the long branches
        TreeOptimizer.collapse( b );

        //System.out.println( b );
    }
    /**
     * Empty manipulation of ParseErrors.
     * @param e A ParseError.
     */
    public void optimizeParseError( ParseError e ) {}
}
