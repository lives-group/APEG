Digraph notDiscardChanges {
  node [shape="box"];
  grammar [label = "Grammar[notDiscardChanges]"];

  aRule [label = "Rule[a]"];
  grammar -> aRule;
  aRule_k [label = "↑k:int "];
  aRule -> aRule_k;
  p_expr_nonterminal0 [label = "NonterminalPegExpr:b"];
  aRule -> p_expr_nonterminal0;
  expr_int0 [label = "0:int"];
  p_expr_nonterminal0 -> expr_int0;
  expr_var1 [label = "k:var"];
  p_expr_nonterminal0 -> expr_var1;
  bRule [label = "Rule[b]"];
  grammar -> bRule;
  bRule_x [label = "↓x:int "];
  bRule -> bRule_x;
  bRule_x1 [label = "↑x1:int "];
  bRule -> bRule_x1;
  p_expr_sequence1 [label = "SequencePegExpr(.)"];
  bRule -> p_expr_sequence1;
  p_expr_update2 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence1 -> p_expr_update2;
  assignment0 [label = "Assignment:x"];
  p_expr_update2 -> assignment0;
  expr_binary2 [label = "+"];
  assignment0 -> expr_binary2;
  expr_var3 [label = "x:var"];
  expr_binary2 -> expr_var3;
  expr_int4 [label = "1:int"];
  expr_binary2 -> expr_int4;
  p_expr_literal3 [label = "'0'"];
  p_expr_sequence1 -> p_expr_literal3;
  p_expr_update4 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence1 -> p_expr_update4;
  assignment1 [label = "Assignment:x1"];
  p_expr_update4 -> assignment1;
  expr_var5 [label = "x:var"];
  assignment1 -> expr_var5;
  cRule [label = "Rule[c]"];
  grammar -> cRule;
  cRule_x [label = "↑x:int "];
  cRule -> cRule_x;
  p_expr_sequence5 [label = "SequencePegExpr(.)"];
  cRule -> p_expr_sequence5;
  p_expr_update6 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence5 -> p_expr_update6;
  assignment2 [label = "Assignment:x"];
  p_expr_update6 -> assignment2;
  expr_int6 [label = "0:int"];
  assignment2 -> expr_int6;
  p_expr_star7 [label = "StarPegExpr(*)"];
  p_expr_sequence5 -> p_expr_star7;
  p_expr_sequence8 [label = "SequencePegExpr(.)"];
  p_expr_star7 -> p_expr_sequence8;
  p_expr_update9 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence8 -> p_expr_update9;
  assignment3 [label = "Assignment:x"];
  p_expr_update9 -> assignment3;
  expr_binary7 [label = "+"];
  assignment3 -> expr_binary7;
  expr_var8 [label = "x:var"];
  expr_binary7 -> expr_var8;
  expr_int9 [label = "1:int"];
  expr_binary7 -> expr_int9;
  p_expr_literal10 [label = "'2'"];
  p_expr_sequence8 -> p_expr_literal10;
}