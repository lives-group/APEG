group prettyprint;

/** Defining the grammar specfication template */
apeg(name, option, header, functions, func_sources, rules) ::= <<
apeg <name>;
<if(option)>

options {
  <option; separator=";\n">;
}
<endif>

<if(header)>

header {
 <header>
}
<endif>

<if(func_sources)>

functions <if(functions)><functions; separator=" ", wrap> <endif>from {
  <func_sources; separator=" ", wrap>
};
<endif>

<rules; separator="\n\n">
>>


/** Template for rules specification */
rule(annotation, name, inh_attr, syn_attr, ret_attr, peg_expr) ::= <<
<if(annotation)>
@<annotation> 
<endif>
<name><if(inh_attr)>[<inh_attr; separator=", ", wrap>]<endif><if(syn_attr)> returns[<syn_attr; separator=", ", wrap>]<endif><if(ret_attr)> locals[<ret_attr; separator=", ", wrap>]<endif>:
  <peg_expr>
;
>>


/** Template for parameters declaration */
decl(type, name) ::= "<type> <name>"


/** Template for types */
int_type() ::= "int"
float_type() ::= "float"
string_type() ::= "string"
boolean_type() ::= "boolean"
grammar_type() ::= "grammar"
rule_type() ::= "rule"
user_type(name) ::= "<name>"


/** Template for expressions */
atribute_expr(name) ::= "<name>"

gt_expr(left_expr, right_expr) ::= "(<left_expr> > <right_expr>)"
ge_expr(left_expr, right_expr) ::= "(<left_expr> \>= <right_expr>)"
lt_expr(left_expr, right_expr) ::= "(<left_expr> \< <right_expr>)"
le_expr(left_expr, right_expr) ::= "(<left_expr> \<= <right_expr>)"
mul_expr(left_expr, right_expr) ::= "(<left_expr> * <right_expr>)"
div_expr(left_expr, right_expr) ::= "(<left_expr> / <right_expr>)"
mod_expr(left_expr, right_expr) ::= "(<left_expr> % <right_expr>)"
add_expr(left_expr, right_expr) ::= "(<left_expr> + <right_expr>)"
sub_expr(left_expr, right_expr) ::= "(<left_expr> - <right_expr>)"

equals_expr(left_expr, right_expr) ::= "(<left_expr> == <right_expr>)"
no_equals_expr(left_expr, right_expr) ::= "(<left_expr> != <right_expr>)"

call_expr(name, params) ::=  "<name>(<params; separator=\", \", wrap>)" 

boolean_expr(value) ::= "<value>"
float_expr(value) ::= "<value>"
int_expr(value) ::= "<value>"
string_expr(value) ::= "'<value>'"
meta_expr(expr) ::= "@[ <expr> ]"
minus_expr(expr) ::= "-<expr>"
not_expr(expr) ::= "!<expr>"
or_expr(left_expr, right_expr) ::= "(<left_expr> || <right_expr>)"
and_expr(left_expr, right_expr) ::= "(<left_expr> && <right_expr>)"


/** Template for parsing expression */
and_peg(peg_expr) ::= "&<peg_expr>"
any_peg() ::= "."
bind_peg(name, peg_expr) ::="<name>=<peg_expr>)"
choice_peg(left_peg, right_peg) ::= <<
 <left_peg>
/
 <right_peg>
>>
constraint_peg(expr) ::= "{? <expr> }"
group_peg(ranges) ::= "[<ranges>]"
literal_peg(value) ::= "'<value>'"
lambda_peg() ::= " " 
nonterminal_peg(name, attrs) ::= "<name>\<<attrs; separator=\", \", wrap>>"
not_peg(peg_expr) ::= "!(<peg_expr>)"
plus_peg(peg_expr) ::= "(<peg_expr>)+"
optional_peg(peg_expr) ::= "(<peg_expr>)?"
sequence_peg(peg_exprs) ::= "<peg_exprs:{x | <x>}; separator=\" \">"
star_peg(peg_expr) ::= "(<peg_expr>)*"
update_peg(assigns) ::= <<{<assigns; separator=" ">}>>


/** Template for assignment from update parsing expressions */
assign(name, expr) ::= "(<name> = <expr>);"


/** func(f) ::= "<f>"  Not implemented yet */



