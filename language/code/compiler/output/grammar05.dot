Digraph testfunction {
  node [shape="box"];
  grammar [label = "Grammar[testfunction]"];

  testeRule [label = "Rule[teste]"];
  grammar -> testeRule;
  inh0 [label = "↓x,↓y"];
  testeRule -> inh0;
  SequencePeg0 [label = "SequencePegExpr(.)"];
  testeRule -> SequencePeg0;
  UpdatePeg1 [label = "UpdatePegExpr([<-])"];
  SequencePeg0 -> UpdatePeg1;
  attributeExpr0 [label = "z:var"];
  UpdatePeg1 -> attributeExpr0;
  AddExpr1 [label = "+"];
  UpdatePeg1 -> AddExpr1;
  attributeExpr2 [label = "x:var"];
  AddExpr1 -> attributeExpr2;
  attributeExpr3 [label = "y:var"];
  AddExpr1 -> attributeExpr3;
  assignmentNode1 [label = "Assignment:y"];
  UpdatePeg1 -> assignmentNode1;
  NonterminalPeg2 [label = "NonterminalPegExpr:strN"];
  SequencePeg0 -> NonterminalPeg2;
  MultExpr4 [label = ""];
  NonterminalPeg2 -> MultExpr4;
  attributeExpr5 [label = "z:var"];
  MultExpr4 -> attributeExpr5;
  IntLiteralExpr6 [label = "2:int"];
  MultExpr4 -> IntLiteralExpr6;
  strNRule [label = "Rule[strN]"];
  grammar -> strNRule;
  inh2 [label = "↓n"];
  strNRule -> inh2;
  SequencePeg3 [label = "SequencePegExpr(.)"];
  strNRule -> SequencePeg3;
  KleenePeg4 [label = "StarPegExpr(*)"];
  SequencePeg3 -> KleenePeg4;
  SequencePeg5 [label = "SequencePegExpr(.)"];
  KleenePeg4 -> SequencePeg5;
  ConstraintPeg6 [label = "ConstraintPegExpr({?})"];
  SequencePeg5 -> ConstraintPeg6;
  GreaterExpr7 [label = "\>"];
  ConstraintPeg6 -> GreaterExpr7;
  attributeExpr8 [label = "n:var"];
  GreaterExpr7 -> attributeExpr8;
  IntLiteralExpr9 [label = "0:int"];
  GreaterExpr7 -> IntLiteralExpr9;
  NonterminalPeg7 [label = "NonterminalPegExpr:CHAR"];
  SequencePeg5 -> NonterminalPeg7;
  UpdatePeg8 [label = "UpdatePegExpr([<-])"];
  SequencePeg5 -> UpdatePeg8;
  attributeExpr10 [label = "n:var"];
  UpdatePeg8 -> attributeExpr10;
  SubExpr11 [label = "-"];
  UpdatePeg8 -> SubExpr11;
  attributeExpr12 [label = "n:var"];
  SubExpr11 -> attributeExpr12;
  IntLiteralExpr13 [label = "1:int"];
  SubExpr11 -> IntLiteralExpr13;
  assignmentNode3 [label = "Assignment:n"];
  UpdatePeg8 -> assignmentNode3;
  ConstraintPeg9 [label = "ConstraintPegExpr({?})"];
  SequencePeg3 -> ConstraintPeg9;
  EqualsExpr14 [label = "=="];
  ConstraintPeg9 -> EqualsExpr14;
  attributeExpr15 [label = "n:var"];
  EqualsExpr14 -> attributeExpr15;
  IntLiteralExpr16 [label = "0:int"];
  EqualsExpr14 -> IntLiteralExpr16;
  NotPeg10 [label = "NotPegExpr(!)"];
  SequencePeg3 -> NotPeg10;
  AnyPeg11 [label = "AnyPegExpr(.)"];
  NotPeg10 -> AnyPeg11;
  CHARRule [label = "Rule[CHAR]"];
  grammar -> CHARRule;
  AnyPeg12 [label = "AnyPegExpr(.)"];
  CHARRule -> AnyPeg12;
}