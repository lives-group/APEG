apeg build_apeg;

/*
-- { '0' / '1' } 1
prog[language g]: '{' newPEG<g, peg> '}' userInput<g>
;

newPEG[language g] returns p:
    pseq<g, p> ('/' pseq<g, p1> {p = {| #p / #p1 |};})*
;

pseq[language g] returns p:
    prefix<g, p> (prefix<g, p1> {p = {| #p #p1 |};})*
;

prefix[language g] returns p:
    '!' pterm<g, p> {p = {| !#p |};} / pterm<g, p>
;

pterm[language g] returns p:
    pfactor<g,p> '*' {p = {| #p* |};} / pfactor<g,p>
;

pfactor[language g] returns p:
    ntCall<g, p> / literal<g, p>
;
*/

ntCall[language g] returns <n, args>:
    n=(a..z)+ '<' expr<g, e> {args = [e];} (',' expr<g, e> {args = args ++ [e];})* '>'
;

literalPEG[language g] returns `s`:
    '\'' s=(a..z)+ '\''
;

userInput[language g]:
    'foo'
;

expr[language g] returns e:
    term<g, t1> '+' expr<g, e1> {e = (| #t + #e1 |);} /
    term<g, t2> '-' expr<g, e2> {e = (| #t + #e2 |);} /
    term<g, t3> {e = t3;}
;

term[language g] returns t:
    factor<g, f1> '*' term<g, f2> {t = (| #f1 * #f2 |);} /
    factor<g, f> {t = f;}
;
-- ~(1 + 2) -> MetaIntLit (3)
-- (| 1 + 2 |) -> MetaAdd (+ (1 2))
-- x = ~1
-- x = (| 1 |)
-- y = (| #x |)
-- (| #x |) -> (MetaInt x)
-- (| x |) -> (MetaAttribute x)

factor[language g] returns ~r:
    number<g, r> 
;

number[language g] returns r:
    digit<g, r> ( digit<g, aux> {r = r * 10 + aux; })*
;
  
digit[language g] returns x1:
    '0'  { x1 = 0; }
    / '1'  { x1 = 1; }
    / '2'  { x1 = 2; }
    / '3'  { x1 = 3; }
    / '4'  { x1 = 4; }
    / '5'  { x1 = 5; }
    / '6'  { x1 = 6; }
    / '7'  { x1 = 7; }
    / '8'  { x1 = 8; }
    / '9'  { x1 = 9; }
;
