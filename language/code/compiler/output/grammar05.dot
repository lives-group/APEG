Digraph testfunction {
  node [shape="box"];
  grammar [label = "Grammar[testfunction]"];

  testeRule [label = "Rule[teste]"];
  grammar -> testeRule;
  inh0 [label = "↓x,↓y"];
  testeRule -> inh0;
  attributeExpr0 [label = "z"];
  SynAtt1 -> attributeExpr0;
  SynAtt1 [label = "↑"];
  testeRule -> SynAtt1;
  SequencePeg0 [label = "SequencePegExpr(.)"];
  testeRule -> SequencePeg0;
  UpdatePeg1 [label = "UpdatePegExpr([<-])"];
  SequencePeg0 -> UpdatePeg1;
  attributeExpr1 [label = "z"];
  UpdatePeg1 -> attributeExpr1;
  AddExpr2 [label = "+"];
  UpdatePeg1 -> AddExpr2;
  attributeExpr3 [label = "x"];
  AddExpr2 -> attributeExpr3;
  attributeExpr4 [label = "y"];
  AddExpr2 -> attributeExpr4;
  assignmentNode2 [label = "Assignment:y"];
  UpdatePeg1 -> assignmentNode2;
  NonterminalPeg2 [label = "NonterminalPegExpr:strN"];
  SequencePeg0 -> NonterminalPeg2;
  MultExpr5 [label = "*"];
  NonterminalPeg2 -> MultExpr5;
  attributeExpr6 [label = "z"];
  MultExpr5 -> attributeExpr6;
  IntLiteralExpr7 [label = "2"];
  MultExpr5 -> IntLiteralExpr7;
  strNRule [label = "Rule[strN]"];
  grammar -> strNRule;
  inh3 [label = "↓n"];
  strNRule -> inh3;
  SequencePeg3 [label = "SequencePegExpr(.)"];
  strNRule -> SequencePeg3;
  KleenePeg4 [label = "StarPegExpr(*)"];
  SequencePeg3 -> KleenePeg4;
  SequencePeg5 [label = "SequencePegExpr(.)"];
  KleenePeg4 -> SequencePeg5;
  ConstraintPeg6 [label = "ConstraintPegExpr({?})"];
  SequencePeg5 -> ConstraintPeg6;
  GreaterExpr8 [label = "\>"];
  ConstraintPeg6 -> GreaterExpr8;
  attributeExpr9 [label = "n"];
  GreaterExpr8 -> attributeExpr9;
  IntLiteralExpr10 [label = "0"];
  GreaterExpr8 -> IntLiteralExpr10;
  NonterminalPeg7 [label = "NonterminalPegExpr:CHAR"];
  SequencePeg5 -> NonterminalPeg7;
  UpdatePeg8 [label = "UpdatePegExpr([<-])"];
  SequencePeg5 -> UpdatePeg8;
  attributeExpr11 [label = "n"];
  UpdatePeg8 -> attributeExpr11;
  SubExpr12 [label = "-"];
  UpdatePeg8 -> SubExpr12;
  attributeExpr13 [label = "n"];
  SubExpr12 -> attributeExpr13;
  IntLiteralExpr14 [label = "1"];
  SubExpr12 -> IntLiteralExpr14;
  assignmentNode4 [label = "Assignment:n"];
  UpdatePeg8 -> assignmentNode4;
  ConstraintPeg9 [label = "ConstraintPegExpr({?})"];
  SequencePeg3 -> ConstraintPeg9;
  EqualsExpr15 [label = "=="];
  ConstraintPeg9 -> EqualsExpr15;
  attributeExpr16 [label = "n"];
  EqualsExpr15 -> attributeExpr16;
  IntLiteralExpr17 [label = "0"];
  EqualsExpr15 -> IntLiteralExpr17;
  NotPeg10 [label = "NotPegExpr(!)"];
  SequencePeg3 -> NotPeg10;
  AnyPeg11 [label = "AnyPegExpr(.)"];
  NotPeg10 -> AnyPeg11;
  CHARRule [label = "Rule[CHAR]"];
  grammar -> CHARRule;
  AnyPeg12 [label = "AnyPegExpr(.)"];
  CHARRule -> AnyPeg12;
}