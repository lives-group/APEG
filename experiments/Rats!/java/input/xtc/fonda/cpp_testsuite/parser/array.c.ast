#superc_args -printAST
TranslationUnit(
  ExternalDeclarationList(
    Conditional(
      1,
      Declaration(
        DeclaringList(
          BasicDeclarationSpecifier(
            DeclarationQualifierList(
              Conditional(
                1,
                xtc.lang.cpp.Syntax$Language(
                  "static"
                )
              )
            ),
            xtc.lang.cpp.Syntax$Language(
              "int"
            )
          ),
          PostfixIdentifierDeclarator(
            UnaryIdentifierDeclarator(
              xtc.lang.cpp.Syntax$Language(
                "*"
              ),
              ArrayDeclarator(
                SimpleDeclarator(
                  xtc.lang.cpp.Syntax$Text(
                    "check_part"
                  )
                )
              )
            ),
            ParameterTypeListOpt(
              ParameterTypeList(
                ParameterList(
                  Conditional(
                    1,
                    ParameterDeclaration(
                      SUETypeSpecifier(
                        StructOrUnionSpecifier(
                          StructOrUnion(
                            xtc.lang.cpp.Syntax$Language(
                              "struct"
                            )
                          ),
                          IdentifierOrTypedefName(
                            xtc.lang.cpp.Syntax$Text(
                              "parsed_partitions"
                            )
                          )
                        )
                      ),
                      AbstractDeclarator(
                        UnaryAbstractDeclarator(
                          xtc.lang.cpp.Syntax$Language(
                            "*"
                          )
                        )
                      )
                    )
                  ),
                  Conditional(
                    1,
                    ParameterDeclaration(
                      SUETypeSpecifier(
                        StructOrUnionSpecifier(
                          StructOrUnion(
                            xtc.lang.cpp.Syntax$Language(
                              "struct"
                            )
                          ),
                          IdentifierOrTypedefName(
                            xtc.lang.cpp.Syntax$Text(
                              "block_device"
                            )
                          )
                        )
                      ),
                      AbstractDeclarator(
                        UnaryAbstractDeclarator(
                          xtc.lang.cpp.Syntax$Language(
                            "*"
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          ),
          InitializerOpt(
            Initializer(
              MatchedInitializerList(
                Conditional(
                  (defined CONFIG_ACORN_PARTITION_ICS),
                  Initializer(
                    PrimaryIdentifier(
                      xtc.lang.cpp.Syntax$Text(
                        "adfspart_check_ICS"
                      )
                    )
                  )
                ),
                Conditional(
                  (defined CONFIG_ACORN_PARTITION_POWERTEC),
                  Initializer(
                    PrimaryIdentifier(
                      xtc.lang.cpp.Syntax$Text(
                        "adfspart_check_POWERTEC"
                      )
                    )
                  )
                ),
                Conditional(
                  (defined CONFIG_ACORN_PARTITION_EESOX),
                  Initializer(
                    PrimaryIdentifier(
                      xtc.lang.cpp.Syntax$Text(
                        "adfspart_check_EESOX"
                      )
                    )
                  )
                ),
                Conditional(
                  (defined CONFIG_ACORN_PARTITION_CUMANA),
                  Initializer(
                    PrimaryIdentifier(
                      xtc.lang.cpp.Syntax$Text(
                        "adfspart_check_CUMANA"
                      )
                    )
                  )
                ),
                Conditional(
                  (defined CONFIG_ACORN_PARTITION_ADFS),
                  Initializer(
                    PrimaryIdentifier(
                      xtc.lang.cpp.Syntax$Text(
                        "adfspart_check_ADFS"
                      )
                    )
                  )
                ),
                Conditional(
                  (defined CONFIG_EFI_PARTITION),
                  Initializer(
                    PrimaryIdentifier(
                      xtc.lang.cpp.Syntax$Text(
                        "efi_partition"
                      )
                    )
                  )
                ),
                Conditional(
                  (defined CONFIG_SGI_PARTITION),
                  Initializer(
                    PrimaryIdentifier(
                      xtc.lang.cpp.Syntax$Text(
                        "sgi_partition"
                      )
                    )
                  )
                ),
                Conditional(
                  (defined CONFIG_LDM_PARTITION),
                  Initializer(
                    PrimaryIdentifier(
                      xtc.lang.cpp.Syntax$Text(
                        "ldm_partition"
                      )
                    )
                  )
                )
              ),
              Initializer(
                Conditional(
                  !(defined CONFIG_LDM_PARTITION),
                  PrimaryIdentifier(
                    xtc.lang.cpp.Syntax$Text(
                      "NULL"
                    )
                  ),
                  (defined CONFIG_LDM_PARTITION),
                  PrimaryIdentifier(
                    xtc.lang.cpp.Syntax$Text(
                      "NULL"
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)
