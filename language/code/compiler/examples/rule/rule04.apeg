
literal3[grammar g] :
    literal<g> literal<g> literal<g> !. ;

literal locals[int n, grammar g1]:
	number<$g, n> { g1 = addRule(copyGrammar($g), concat(concat('strN : ', concatN('CHAR<$g> ', n)), ';')) ;  }
	'['
	strN<g1>
	']'
    ;

strN[grammar g]:
    {? false }
	;

CHAR[grammar g] : . ;

number[grammar g] returns[int r] locals[int aux] :
  digit<g,r> ( digit<g,aux> { r = r * 10 + aux; } )*
  ;
  
digit[grammar g] returns [int x1] :
  '0'  { x1 = 0; }
  / '1'  { x1 = 1; }
  / '2'  { x1 = 2; }
  / '3'  { x1 = 3; }
  / '4'  { x1 = 4; }
  / '5'  { x1 = 5; }
  / '6'  { x1 = 6; }
  / '7'  { x1 = 7; }
  / '8'  { x1 = 8; }
  / '9'  { x1 = 9; }
  ;
