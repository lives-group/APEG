Digraph testfunction {
  node [shape="box"];
  grammar [label = "Grammar[testfunction]"];

  testeRule [label = "Rule[teste]"];
  grammar -> testeRule;
  SequencePeg0 [label = "SequencePegExpr(.)"];
  testeRule -> SequencePeg0;
  UpdatePeg1 [label = "UpdatePegExpr([<-])"];
  SequencePeg0 -> UpdatePeg1;
  attributeExpr0 [label = "z:var"];
  UpdatePeg1 -> attributeExpr0;
  assignmentNode0 [label = "Assignment:z"];
  UpdatePeg1 -> assignmentNode0;
  NonterminalPeg2 [label = "NonterminalPegExpr:strN"];
  SequencePeg0 -> NonterminalPeg2;
  MultExpr1 [label = ""];
  NonterminalPeg2 -> MultExpr1;
  attributeExpr2 [label = "z:var"];
  MultExpr1 -> attributeExpr2;
  IntLiteralExpr3 [label = "2:int"];
  MultExpr1 -> IntLiteralExpr3;
  strNRule [label = "Rule[strN]"];
  grammar -> strNRule;
  SequencePeg3 [label = "SequencePegExpr(.)"];
  strNRule -> SequencePeg3;
  KleenePeg4 [label = "StarPegExpr(*)"];
  SequencePeg3 -> KleenePeg4;
  SequencePeg5 [label = "SequencePegExpr(.)"];
  KleenePeg4 -> SequencePeg5;
  ConstraintPeg6 [label = "ConstraintPegExpr({?})"];
  SequencePeg5 -> ConstraintPeg6;
  GreaterExpr4 [label = "\>"];
  ConstraintPeg6 -> GreaterExpr4;
  attributeExpr5 [label = "n:var"];
  GreaterExpr4 -> attributeExpr5;
  IntLiteralExpr6 [label = "0:int"];
  GreaterExpr4 -> IntLiteralExpr6;
  NonterminalPeg7 [label = "NonterminalPegExpr:CHAR"];
  SequencePeg5 -> NonterminalPeg7;
  UpdatePeg8 [label = "UpdatePegExpr([<-])"];
  SequencePeg5 -> UpdatePeg8;
  attributeExpr7 [label = "n:var"];
  UpdatePeg8 -> attributeExpr7;
  assignmentNode1 [label = "Assignment:n"];
  UpdatePeg8 -> assignmentNode1;
  ConstraintPeg9 [label = "ConstraintPegExpr({?})"];
  SequencePeg3 -> ConstraintPeg9;
  EqualsExpr8 [label = "=="];
  ConstraintPeg9 -> EqualsExpr8;
  attributeExpr9 [label = "n:var"];
  EqualsExpr8 -> attributeExpr9;
  IntLiteralExpr10 [label = "0:int"];
  EqualsExpr8 -> IntLiteralExpr10;
  NotPeg10 [label = "NotPegExpr(!)"];
  SequencePeg3 -> NotPeg10;
  AnyPeg11 [label = "AnyPegExpr(.)"];
  NotPeg10 -> AnyPeg11;
  CHARRule [label = "Rule[CHAR]"];
  grammar -> CHARRule;
  AnyPeg12 [label = "AnyPegExpr(.)"];
  CHARRule -> AnyPeg12;
}