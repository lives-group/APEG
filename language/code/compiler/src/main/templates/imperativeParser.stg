group prettyprint;

/** Defining the grammar specfication template */
apeg(name, rules) ::= <<
/**
 *  APEG Tool Parser 
 *  This code was automatically generated by APEG Parser Generator.
 *  Last modification 27/04/2018
 */
public class <name> extends StateFullBaseParser{

      public <name>(String fname) {
          super(fname);
          startRule("root");
      }

      <rules; separator="\n\n"> 
}
>>


/** Template for rules specification */
rule( name, peg_expr) ::= <<
public PegResult <name>(){
   startRule("<name>");
   <peg_expr>
   if(isOk()){return success();} else{return fail();}      
}>>

/** Template for parsing expression 
  *
  */
choice_peg(left_peg, right_peg) ::= 
<<mkBacktracPoint();
<left_peg>
if(isOk()){ return success();}
restore();    
mkBacktracPoint();
<right_peg>
if(isOk()){ return success();}
>>


cont(expr1,expr2) ::=
<<
<expr1><if(expr2)>
if(isOk()){
    <expr2>
}<endif> >>

match(value)::= <<match("<value>");>> 
call(name) ::= <<<name>();>>

and_peg(peg_expr) ::= 
<<
mkBacktracPoint();
<peg_expr>
restore();>>

star_peg(peg_expr) ::= 
<<
do{
   mkBacktracPoint();
   <peg_expr>
   if(!isOk()){restore();} else{dismissBacktracPoint();}
}while(isOk());
done();
>>

plus_peg(peg_expr) ::= 
<<
<peg_expr>
if(!isOk()){
 return fail();
}
do{
   mkBacktracPoint();
   <peg_expr>
   if(!isOk()){restore();} else{dismissBacktracPoint();}
}while(isOk());
done();
>>

not_peg(peg_expr) ::= 
<<
mkBacktracPoint();
<peg_expr>
if(isOk()){ restore(); fail();} 
else{
    dismissBacktracPoint();  
    done(); 
}
>>


optional_peg(peg_expr) ::= 
<<
mkBacktracPoint();
<peg_expr>
if(isOk()){ dismissBacktracPoint();}
else{ restore(); done(); } 
>>

any_peg() ::=
<<
matchNext();
if(isOk()){ return endSuccess();}
>>

lambda_peg() ::= " " 

bind_peg(name, peg_expr) ::="<name>=<peg_expr>"

constraint_peg(expr) ::= "{? <expr> }"

group_peg(ranges) ::= "[<ranges>]"



update_peg(assigns) ::= <<{<assigns; separator=" ">}>>
