Digraph notDiscardChanges {
  node [shape="box"];
  grammar [label = "Grammar[notDiscardChanges]"];

  aRule [label = "Rule[a]"];
  grammar -> aRule;
  aRule_k [label = "↑k:int "];
  aRule -> aRule_k;
  p_expr_nonterminal0 [label = "NonterminalPegExpr:b"];
  aRule -> p_expr_nonterminal0;
  expr_int0 [label = "0:int"];
  p_expr_nonterminal0 -> expr_int0;
  expr_var1 [label = "k:var"];
  p_expr_nonterminal0 -> expr_var1;
  bRule [label = "Rule[b]"];
  grammar -> bRule;
  bRule_x [label = "↓x:int "];
  bRule -> bRule_x;
  bRule_x1 [label = "↑x1:int "];
  bRule -> bRule_x1;
  p_expr_choice1 [label = "ChoicePegExpr(/)"];
  bRule -> p_expr_choice1;
  p_expr_sequence2 [label = "SequencePegExpr(.)"];
  p_expr_choice1 -> p_expr_sequence2;
  p_expr_update3 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence2 -> p_expr_update3;
  assignment0 [label = "Assignment:x"];
  p_expr_update3 -> assignment0;
  expr_binary2 [label = "+"];
  assignment0 -> expr_binary2;
  expr_var3 [label = "x:var"];
  expr_binary2 -> expr_var3;
  expr_int4 [label = "1:int"];
  expr_binary2 -> expr_int4;
  p_expr_literal4 [label = "'0'"];
  p_expr_sequence2 -> p_expr_literal4;
  p_expr_update5 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence2 -> p_expr_update5;
  assignment1 [label = "Assignment:x1"];
  p_expr_update5 -> assignment1;
  expr_var5 [label = "x:var"];
  assignment1 -> expr_var5;
  p_expr_sequence6 [label = "SequencePegExpr(.)"];
  p_expr_choice1 -> p_expr_sequence6;
  p_expr_update7 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence6 -> p_expr_update7;
  assignment2 [label = "Assignment:x"];
  p_expr_update7 -> assignment2;
  expr_binary6 [label = "+"];
  assignment2 -> expr_binary6;
  expr_var7 [label = "x:var"];
  expr_binary6 -> expr_var7;
  expr_int8 [label = "1:int"];
  expr_binary6 -> expr_int8;
  p_expr_literal8 [label = "'1'"];
  p_expr_sequence6 -> p_expr_literal8;
  p_expr_update9 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence6 -> p_expr_update9;
  assignment3 [label = "Assignment:y"];
  p_expr_update9 -> assignment3;
  expr_string9 [label = "'A':string"];
  assignment3 -> expr_string9;
  assignment4 [label = "Assignment:y"];
  p_expr_update9 -> assignment4;
  expr_var10 [label = "z:var"];
  assignment4 -> expr_var10;
  assignment5 [label = "Assignment:z"];
  p_expr_update9 -> assignment5;
  expr_int11 [label = "20:int"];
  assignment5 -> expr_int11;
  assignment6 [label = "Assignment:w"];
  p_expr_update9 -> assignment6;
  expr_var12 [label = "z:var"];
  assignment6 -> expr_var12;
  cRule [label = "Rule[c]"];
  grammar -> cRule;
  cRule_x [label = "↑x:int "];
  cRule -> cRule_x;
  p_expr_sequence10 [label = "SequencePegExpr(.)"];
  cRule -> p_expr_sequence10;
  p_expr_update11 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence10 -> p_expr_update11;
  assignment7 [label = "Assignment:x"];
  p_expr_update11 -> assignment7;
  expr_int13 [label = "0:int"];
  assignment7 -> expr_int13;
  p_expr_star12 [label = "StarPegExpr(*)"];
  p_expr_sequence10 -> p_expr_star12;
  p_expr_sequence13 [label = "SequencePegExpr(.)"];
  p_expr_star12 -> p_expr_sequence13;
  p_expr_update14 [label = "UpdatePegExpr([<-])"];
  p_expr_sequence13 -> p_expr_update14;
  assignment8 [label = "Assignment:x"];
  p_expr_update14 -> assignment8;
  expr_binary14 [label = "+"];
  assignment8 -> expr_binary14;
  expr_var15 [label = "x:var"];
  expr_binary14 -> expr_var15;
  expr_int16 [label = "1:int"];
  expr_binary14 -> expr_int16;
  p_expr_literal15 [label = "'2'"];
  p_expr_sequence13 -> p_expr_literal15;
}