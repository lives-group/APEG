# This file is based on dg.exp, a general test driver of DejaGNU
# This file uses and modifies some procedures from dg.exp
 
# The currently supported options are:
#
# dg-error regexp comment 
#   indicate an error message <regexp> is expected on the line
#   where this option occurs
#   (the test fail fails if the output does not contain the expected message)
#	
#
# dg-warning regexp comment
#   indicate a warning message <regexp> is expected on the line
#   where this option occurs
#   (the test fails if the output doesn't contain the expected message)
# 
# (If there is no option, the testcase is expected to pass)
#
# dg-preprocess comment
#   indicate the source file need to be preprocessed
#	
# dg-checkwhat subtool
#   indicate which tool is to be tested, the parser or analyzer
# 

# Useful subroutines.

#
# Line number format.  This is how line numbers appear in program output.
#
set dg-linenum-format ":%d:"
proc dg-format-linenum { linenum } {
  global dg-linenum-format
  return [format ${dg-linenum-format} $linenum]
}

#
# dg-need-preprocess: check if the source file needs to be preprocessed
#
proc dg-need-preprocess { prog } {
  set tmp [grep $prog "{{\[ \t\]\+dg-preprocess\+\[ \t\]\+.*\[ \t\]\+}}" line]
  if ![string match "" $tmp] {
    return "YES"
  } else {
    return "NO"
  }	
}

#
# dg-get-checkwhat: get the option dg-checkwhat from a source file to see
#   if the source file is used to check the parser or the analyzer
#
proc dg-get-checkwhat { prog } {
  set tmp [grep $prog "{{\[ \t\]\+dg-checkwhat\+\[ \t\]\+.*\[ \t\]\+}}" line]
  if { [llength $tmp] == 0 } {
    return "Unspecified"
  }
  if { [llength $tmp] == 1 } {
    set i [lindex $tmp 0]  
    regexp "(\[0-9\]\+)\[ \t\]\+{{\[ \t\]+(dg-\[-a-z\]+)\[ \t\]\+(.*)\[ \t\]+}}(\n|$)" $i i line cmd args
    set result [lindex $args 0]
    return $result
  } else {
    error "dg-checkwhat in $prog must be specified once"
    return "Error"
  }	
}


# dg-get-options -- pick out the dg-xxx options in a testcase
#
# PROG is the file name of the testcase.
# this proc will copy the testcase to a temporary file and remove dg-xxx options from
# that temporary file. Then we use the temporary file to run test
# The result is a list of options found.
#
# Example: For the following testcase:
#
# int foo { return 0; }  {{ dg-error fatal "some comment" }}
#
# we return:
#
# { dg-error 1 fatal "some comment" }, 1 is the number of the line where the option occurs
#

proc dg-get-options { args } {
  set input_file [lindex $args 0]
  set output_file [lindex $args 1]
  set input [open $input_file "r"]
  set output [open $output_file "w"]
  # get options
  set result ""
  set tmp [grep $input_file "{{\[ \t\]\+dg-\[-a-z\]\+\[ \t\]\+.*\[ \t\]\+}}" line]
  if ![string match "" $tmp] {
    foreach i $tmp {
      regexp "(\[0-9\]\+)\[ \t\]\+{{\[ \t\]+(dg-\[-a-z\]+)\[ \t\]\+(.*)\[ \t\]+}}(\n|$)" $i i line cmd args
      append result " { $cmd $line $args }"
    }
  }
  while 1 { 
    # remove options and copy prog to a new file
    if {[gets $input input_line] == -1} break
    regsub "{{\[ \t\]\+dg-\[-a-z\]\+\[ \t\]\+.*\[ \t\]\+}}" $input_line "" new_line
    puts $output $new_line        
  }	
  close $input
  close $output
  return $result
}

# process error 
proc dg-error { args } {
  upvar dg-messages messages
  if { [llength $args] > 3 } {
    error "dg-error at line [lindex $args 0] : too many arguments"
    return
  }
  if { [llength $args] < 2 } {
    error "dg-error at line [lindex $args 0] : not enough arguments"
    return
  }
  if { [llength $args] == 2 } {
    set line [dg-format-linenum [lindex $args 0]] 	
  } else {
    set line [dg-format-linenum [lindex $args 2]] 	
  }
    
  lappend messages [list $line "ERROR" [lindex $args 1] [lindex $args 2]]
}

# process warning
proc dg-warning { args } {
  upvar dg-messages messages
  if { [llength $args] > 3 } {
    error "dg-warning at line [lindex $args 0]: too many arguments"
    return
  }
  if { [llength $args] < 2 } {
    error "dg-warning at line [lindex $args 0]: not enough arguments"
    return
  }
  if { [llength $args] == 2 } {
    set line [dg-format-linenum [lindex $args 0]]
  } else {
    set line [dg-format-linenum [lindex $args 2]]
  }
    
  lappend messages [list $line "WARNING" [lindex $args 1] [lindex $args 2]]
}

# Option used to preprocess the source file
proc dg-preprocess { args } {
  if { [llength $args] > 2 } {
    error "dg-preprocess at line [lindex $args 0]: too many arguments"
    return
  }
}

# Option used to indicate which tool to be tested
proc dg-checkwhat { args } {
  if { [llength $args] > 2 } {
    error "xtc_checkwhat at line [lindex $args 0]: too many arguments"
    return
  }
}

# Set up our environment
#
# There currently isn't much to do, but always calling it allows us to add
# enhancements without having to update our callers.
# It must be run before calling `dg-runtest'.

proc dg-init { } {
}

# dg-runtest -- simple main loop useful to most testsuites
#
# global runtests are the specific files (.exp) to run
# runtests is defined in runtest.exp, which a list of two elements: the script name
# and any arguments ("" if none). In this testsuite, runtests is just a list of script name
# runtest_file_p is defined in util.exp of DejaGNU
#

proc dg-runtest { testcases } {
  global check_what
  global SUBTOOL
  global runtests
  set checkdone "NO"
  # check if the test driver specifies the tool to be tested
  if ![string match $check_what ""] {
    if [string match $SUBTOOL "c-typical-analyzer"] {
      if ![string match $check_what "c-analyzer" ] {
        return
      } else {
        set checkdone "YES"
      }
    } else {
      if [string match $SUBTOOL "c-ml-analyzer"] {
        if ![string match $check_what "c-analyzer" ] {
          return
        } else {
          set checkdone "YES"
        }
      } else {
        if ![string match $check_what $SUBTOOL] {
          return	
        } else {
          set checkdone "YES"
        }
      }
    } 
  }
  foreach testcase $testcases {
    # If we're only testing specific files and this isn't one of them, skip it.
    if ![runtest_file_p $runtests $testcase] {
      continue
    }
	
    set check [dg-test $testcase $checkdone]
      if [string match $check "Error"] {
	puts "Could not run tool"
	return	
      }
  }
}
# dg-trim-dirname -- rip DIR_NAME out of FILE_NAME
#
# Syntax: dg-trim-dirname dir_name file_name
# We need to go through this contorsion in order to properly support
# directory-names which might have embedded regexp special characters.

proc dg-trim-dirname { dir_name file_name } {
  set special_character "\[\?\+\-\.\(\)\$\|\]"
  regsub -all $special_character $dir_name "\\\\&" dir_name
  regsub "^$dir_name/?" $file_name "" file_name
  return $file_name
}

#
#rats-runtest -- main loop to test rats
#
proc rats-runtest { testcases } {
  global dg-linenum-format
  foreach testcase $testcases {
    set to_check [dg-get-checkwhat $testcase]
    set name [file tail [file dirname $testcase]]/[file tail $testcase]
    verbose "Testing $name"
    # Check the ouput
    if [string match $to_check "Unspecified"] {
      set output [rats-dg-test $testcase $to_check]
      set procfile [file rootname $testcase]
      append procfile ".proc"
      if [string match $output "File error"] {
        puts "File error"
        continue
      }
      if [string match $output "File not found"] {
        puts "File $procfile not found"
        continue
      }
      if [string match $output "Pass"] {
        pass $testcase	
        continue
      }
      if [string match $output "Fail"] {
        fail $testcase
        continue
      }
      puts "Unknown error"
    } else { 
      #
      # check for errors or warnings
      #
      set dg-messages ""
      set option_removed_file [file rootname $testcase]
      append option_removed_file ".E"
      set tmp [dg-get-options $testcase ${option_removed_file}]
      foreach op $tmp {
        verbose "Processing option: $op" 3
        set status [catch "$op" errmsg]
        if { $status != 0 } {
          perror "$name: $errmsg for \"$op\"\n"
          unresolved "$name: $errmsg for \"$op\""
          return
        }
      } 
      # Run and get output
      set output [rats-dg-test ${option_removed_file} $to_check]
      if [string match $output "Timeout"] {
        unresolved "$name: not responsed, timeout"
        continue
      }
      # analyze the output, compare with error or warning messages
      # START HERE
      if { [llength ${dg-messages}] > 0 } {
        set seen_error "NO"
        foreach i ${dg-messages} {
          # prepare a temporary file
          set tempfile [file rootname $testcase]
          append tempfile ".temp"
          # write output to a temp file
          set file [open $tempfile "w"]
          puts $file $output
          close $file
          verbose "Scanning for message: $i" 3
          # Remove all error messages for the line [lindex $i 0]
          # in the source file.  If we find any, success!
          set line [lindex $i 0]
          set pattern [lindex $i 2]
          set comment [lindex $i 3]
          set match_check "NO"
          set output ""
          set file [open $tempfile "r"]
          while 1 {
            if {[gets $file aline] == -1} {
              break
            }
            if [regsub -all "(^|\n)(\[^\n\]+(E|c)+$line\[^\n\]*($pattern))+" $aline "\n" newline]    {
              if [string match $match_check "NO"] {
                append output $newline
                append output "\n"
                set match_check "YES"
              } else {
                append output $aline
                append output "\n"
              }
            } else {
              append output $aline
              append output "\n"
            }  
          }
          #send_user "Before:\n$comp_output\n"
          if [string match $match_check "YES"] {
            set ok pass
          } else {
            set ok fail
            set seen_error "YES"            
          }
			
          # $line will either be a formatted line number or a number all by
          # itself.  Delete the formatting.
          scan $line ${dg-linenum-format} line
          switch [lindex $i 1] {
            "ERROR" {
	      $ok "$name $comment (test for errors)"               
            }
            "WARNING" {
	      $ok "$name $comment (test for warnings)"			
            }
          }
          close $file
          # remove the tempfile
          exec rm -f $tempfile
        } 
        # end foreach
        # check for more errors than expected 
    
        #delete the extra lines.
        regsub -all "\n+" $output "\n" output
        regsub "^\n+" $output "" output
        if [string match $seen_error "NO"] {
          if [regsub ": error:" $output "" output] {
            fail "$name (excess error)"
            puts $output                        
          }
          if [regsub ": warning:" $output "" output] {
	    fail "$name (excess warning)"                        
          }
        }
     
      } else {
        # dg-messages is empty, the testcase is expected to pass
        if ![string match "" $output] {
          fail "$name (unexpected errors/warnings)"                
        } else {
          pass "$name (test for success)"
        }
      }
      # END HERE
      #puts $output
      #remove files  
      exec rm -f $option_removed_file          
    }
  }
  # remove the .proc2 files	
  foreach testcase $testcases {
    set outfile [file rootname $testcase]
    append outfile ".proc2"
    exec rm -f $outfile    
  } 	
  return		
}


# dg-test -- runs a testcase
#
# Syntax: dg-test prog
#
# PROG is the full path name of the file to pass to xtc (CDriver).

proc dg-test { args } {
  global dg-linenum-format
  global errorCode errorInfo
  global srcdir
  global check_what
  global SUBTOOL
  set keep 0
  set i 0
  # check arguments 	
  if { [llength $args] > 2 } {
    error "[lindex $args 0]: too many arguments"
    return
  }
    
  set prog [lindex $args 0]
  set checkdone [lindex $args 1]
  set text "\[- A-Za-z0-9\.\;\"\_\:\'\`\(\)\!\#\=\+\?\&\*]*"

  set name [dg-trim-dirname $srcdir $prog]
    
  # If we couldn't rip $srcdir out of `prog' then just do the best we can.
  # The point is to reduce the unnecessary noise in the logs.  Don't strip
  # out too much because different testcases with the same name can confuse
  # `test-tool'.
  if [string match "/*" $name] {
    set name "[file tail [file dirname $prog]]/[file tail $prog]"
  }

  # Process any embedded dg options in the testcase.
  set dg-messages ""
  # Define our own "special function" `unknown' so we catch spelling errors.
  # But first rename the existing one so we can restore it afterwards.
  catch {rename dg-save-unknown ""}
  rename unknown dg-save-unknown
  proc unknown { args } {
    return -code error "unknown dg option: $args"
  }
     
  # check what to check, parser or analyzer, for this source file
  if ![string match $checkdone "YES"] {
    set to_check [dg-get-checkwhat $prog]
    if [string match $to_check "Error"] {
      puts "No tool specified for this source file: $prog"
      return	
    }
    if [string match $SUBTOOL "c-typical-analyzer"] {
      if ![string match $to_check "c-analyzer"] {
        return
      }
    } else { 
      if [string match $SUBTOOL "c-ml-analyzer"] {
        if ![string match $to_check "c-analyzer"] {
          return
        }
      } else {
        if ![string match $to_check $SUBTOOL] {
          return
        }
      }
    }
  } 

  # check if the source file needs to be preprocessed
  set check [dg-need-preprocess $prog]
  
  # get options
  set option_removed_file [file rootname $prog]
  append option_removed_file ".E"
  set tmp [dg-get-options $prog ${option_removed_file}]	    
    
  if [string match $check "YES"] {    
    set preprocess_output [xtc-dg-preprocess $prog ${option_removed_file}]
    if [string match $preprocess_output "GCC Timeout"] {
      unresolved "$name: could not run this testcase, GCC Timeout when preprocessing"
      return	
    }
    if [string match ${preprocess_output} "GCC Error"] {
      unresolved "$name: could not run this testcase, GCC Error when preprocessing"
      return	
    }	
  } 
    
  foreach op $tmp {
    verbose "Processing option: $op" 3
    set status [catch "$op" errmsg]
    if { $status != 0 } {
      perror "$name: $errmsg for \"$op\"\n"
      unresolved "$name: $errmsg for \"$op\""
      return
    }
  }
  
  # Restore normal error handling.
  rename unknown ""
  rename dg-save-unknown unknown
  # Run the tool and analyze the results.
  verbose "Testing [file tail [file dirname $prog]]/[file tail $prog]"
  set comp_output [xtc-dg-test $option_removed_file]
  
  # check for error   
  if [string match $comp_output "Wrong tool was invoked"] {
    unresolved "$name: Could not run this testcase"
    return
  }

  if [string match $comp_output "Unknown tool"] {
    set result "Error"
    return $result
  }

  if [string match $comp_output "Timeout"] {
    unresolved "$name: not responsed, timeout"
    return 
  }
   
  # Analyze output for result	
  # Testing
    	
  if { [llength ${dg-messages}] > 0 } {
    foreach i ${dg-messages} {
      verbose "Scanning for message: $i" 3
      # Remove all error messages for the line [lindex $i 0]
      # in the source file.  If we find any, success!
      set line [lindex $i 0]
      set pattern [lindex $i 2]
      set comment [lindex $i 3]
      #send_user "Before:\n$comp_output\n"
      if [regsub -all "(^|\n)(\[^\n\]+(E|c)+$line\[^\n\]*($pattern)\[^\n\]*\n?)+" $comp_output "\n" comp_output] {
        set comp_output [string trimleft $comp_output]
        set ok pass
      } else {
        set ok fail        
      }
			
      # $line will either be a formatted line number or a number all by
      # itself.  Delete the formatting.
      scan $line ${dg-linenum-format} line
      switch [lindex $i 1] {
        "ERROR" {
	  $ok "$name $comment (test for errors)"                                            
        }
        "WARNING" {
	  $ok "$name $comment (test for warnings)"			
        }
      }
    } 
    # end foreach
    # check for more errors than expected (just for analyzer)	
    if [string match ${check_what} "analyzer"] {
      #delete the extra lines.
      regsub -all "\n+" $comp_output "\n" comp_output
      regsub "^\n+" $comp_output "" comp_output
      if [regsub ": error:" $comp_output "" comp_output] {
	fail "$name (excess error)"                        
      }
      if [regsub ": warning:" $comp_output "" comp_output] {
	fail "$name (excess warning)"                        
      }
    } 
  } else {
    # dg-messages is empty, the testcase is expected to pass
    if ![string match "" $comp_output] {
      fail "$name (unexpected errors/warnings)"                
    } else {
       pass "$name (test for success)"
    }
  }
  # for further testing
  if { [info proc xtc-dg-prune] != "" } {
    set comp_output [xtc-dg-prune $comp_output]
    switch -glob $comp_output {
      "::untested::*" {
	regsub "::untested::" $comp_output "" message
	untested "$name: $message"
	return
      }
      "::unresolved::*" {
	regsub "::unresolved::" $comp_output "" message
	unresolved "$name: $message"
	return
      }
      "::unsupported::*" {
	regsub "::unsupported::" $comp_output "" message
	unsupported "$name: $message"
	return
      }
    }
  }
  
  #remove files  
  exec rm -f $option_removed_file    
}
# Do any necessary cleanups
#
# This is called at the end to undo anything dg-init did (that needs undoing).
#
proc dg-finish { } {
  # Reset this in case caller wonders whether s/he should.
  global prms_id
  set prms_id 0

  # The framework doesn't like to see any error remnants, so remove them.
  global errorInfo
  if [info exists errorInfo] {
    unset errorInfo
  }

  # If the tool has a "finish" routine, call it.
  # There may be a bit of duplication (eg: resetting prms_id), leave it.
  # Let's keep these procs robust.
  global tool
  if ![string match "" [info procs ${tool}_finish]] {
   ${tool}_finish
  }
}
